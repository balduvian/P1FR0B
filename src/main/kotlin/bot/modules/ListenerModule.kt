package bot.modules

import bot.Bot
import bot.Logger
import net.dv8tion.jda.api.JDA
import net.dv8tion.jda.api.events.GenericEvent
import java.util.*

/**
 * module that also implements the listener adapter, suitable for small modules since it removes the need for separate
 * listeners
 * @author Varas#5480
 */
abstract class ListenerModule : IBotModule, ListenerAdapter {

	private val bots : LinkedList<Bot> = LinkedList()

	/**
	 * function that gets called after startup has completed, and all modules are loaded, or after the module was added
	 * @param bot reference to the JDA object of a bot that is currently running
	 */
	override fun onStartup(bot: Bot) : Boolean {
		bot.addListenerAdapter(this)
		bots.add(bot)
		return true
	}

	/**
	 * function to clean up temporary resources
	 * @param bot reference to the JDA object of a bot that is currently running
	 */
	override fun stop(bot: Bot) {
		bot.addListenerAdapter(this)
		bots.remove(bot)
	}

	/**
	 * gets a bot the module is serving with a JDA object that matches the one given
	 * @param jda JDA object that this module serves
	 * @return bot that this module is serving with the specified JDA object
	 * @throws NullPointerException if the module is not serving any Bot with a matching JDA object
	 */
	override fun getBot(jda : JDA) : Bot {
		for (bot in bots) {
			if (bot.getGuild().jda == jda) {
				return bot
			}
		}
		throw NullPointerException("failed to get the correct bot")
	}

	/**
	 * gets a bot the module is serving with that the given event belongs to
	 * @param event event that was generated by the bot
	 * @return bot that generated the event
	 * @throws NullPointerException if the module is not serving the bot that generated the event
	 */
	override fun getBot(event: GenericEvent) : Bot {
		return getBot(event.jda)
	}

	/**
	 * gets the first bot in the list
	 * @return bot that is first in bots
	 * @throws NullPointerException if the module isn't serving any bots
	 */
	override fun getBot() : Bot {
		if (bots.size > 0) {
			return bots[0]
		}
		throw NullPointerException("failed to get any bot")
	}

	override fun onGenericEvent(event: GenericEvent) {
		try {
			super.onGenericEvent(event)
		} catch (e : Throwable) {
			Logger.logError(e)
		}
	}
}