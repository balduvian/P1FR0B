package bot.modules

import bot.Bot
import net.dv8tion.jda.api.JDA
import net.dv8tion.jda.api.events.GenericEvent
import java.util.*

/**
 * Represents a functionality or set of functionalities which the bot represents.
 * @author Varas#5480
 */
abstract class BotModule : IBotModule {

	private val bots : LinkedList<Bot> = LinkedList()

	/**
	 * function gets called when the bot goes online or when the module is started.
	 * @return whether or not the startup was successful.
	 */
	override fun load() : Boolean {return true}

	/**
	 * function that gets called after startup has completed, and all modules are loaded, or after the module was added
	 * @param bot reference to the JDA object of a bot that is currently running
	 */
	override fun onStartup(bot : Bot) : Boolean {
		bots.add(bot)
		return true
	}

	/**
	 * function to clean up temporary resources
	 * @param bot reference to the JDA object of a bot that is currently running
	 */
	override fun stop(bot : Bot) {
		bots.remove(bot)
	}

	/**
	 * event that gets called whenever another module is added to a bot that this module is serving. This is guaranteed
	 * to have been called for every other module that is on the bot
	 * @param module module that has been added to the bot
	 */
	override fun onAddModule(module : IModule) {}

	/**
	 * event that gets called whenever a module has been removed from a bot that this module is serving.
	 * @param module
	 */
	override fun onRemoveModule(module : IModule) {}

	/**
	 * gets a bot the module is serving with a JDA object that matches the one given
	 * @param jda JDA object that this module serves
	 * @return bot that this module is serving with the specified JDA object
	 * @throws NullPointerException if the module is not serving any Bot with a matching JDA object
	 */
	override fun getBot(jda : JDA) : Bot {
		for (bot in bots) {
			if (bot.getGuild().jda == jda) {
				return bot
			}
		}
		throw NullPointerException("failed to get the correct bot")
	}

	/**
	 * gets a bot the module is serving with that the given event belongs to
	 * @param event event that was generated by the bot
	 * @return bot that generated the event
	 * @throws NullPointerException if the module is not serving the bot that generated the event
	 */
	override fun getBot(event: GenericEvent) : Bot {
		return getBot(event.jda)
	}

	/**
	 * gets the first bot in the list
	 * @return bot that is first in bots
	 * @throws NullPointerException if the module isn't serving any bots
	 */
	override fun getBot() : Bot {
		if (bots.size > 0) {
			return bots[0]
		}
		throw NullPointerException("failed to get any bot")
	}
}